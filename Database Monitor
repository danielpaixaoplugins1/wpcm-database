<?php
/**
 * Plugin Name: WPCM Database Monitor
 * Description: Monitors database tables and columns, provides backup and restore functionalities, and offers a user interface for database management within the WordPress admin area.
 * Version: 1.4
 * Author: Daniel Oliveira da Paixao
 * Text Domain: wpcm-database-monitor
 */

if (!defined('WPINC')) {
    die;
}

register_activation_hook(__FILE__, 'mdbm_activate_plugin');
register_deactivation_hook(__FILE__, 'mdbm_deactivate_plugin');
add_action('admin_menu', 'mdbm_admin_menu');
add_action('activated_plugin', 'mdbm_update_database_structure');
add_action('deactivated_plugin', 'mdbm_update_database_structure');

function mdbm_activate_plugin() {
    mdbm_create_monitoring_table();
    mdbm_create_backup_directory();
    mdbm_initialize_monitoring();
}

function mdbm_deactivate_plugin() {
    mdbm_cleanup_monitoring();
}

function mdbm_create_monitoring_table() {
    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    global $wpdb;
    $charset_collate = $wpdb->get_charset_collate();
    $table_name = $wpdb->prefix . 'mdbm_monitoring';

    $sql = "CREATE TABLE $table_name (
        id mediumint(9) NOT NULL AUTO_INCREMENT,
        table_name varchar(255) NOT NULL,
        column_info longtext NOT NULL,
        last_checked datetime DEFAULT '0000-00-00 00:00:00' NOT NULL,
        PRIMARY KEY  (id)
    ) $charset_collate;";

    dbDelta($sql);
}

function mdbm_create_backup_directory() {
    $backup_dir = WP_CONTENT_DIR . '/mdbm_backups';
    if (!file_exists($backup_dir)) {
        mkdir($backup_dir, 0755, true);
    }
}

function mdbm_initialize_monitoring() {
    global $wpdb;
    $tables = $wpdb->get_results("SHOW TABLES", ARRAY_N);
    foreach ($tables as $table) {
        mdbm_monitor_table($table[0]);
    }
}

function mdbm_monitor_table($table_name) {
    global $wpdb;
    $columns = $wpdb->get_results($wpdb->prepare("SHOW COLUMNS FROM %s", $table_name), ARRAY_A);
    $column_info = json_encode($columns);
    $table_monitoring = $wpdb->prefix . 'mdbm_monitoring';

    $wpdb->replace($table_monitoring, [
        'table_name' => $table_name,
        'column_info' => $column_info,
        'last_checked' => current_time('mysql', 1)
    ]);
}

function mdbm_update_database_structure() {
    if (!current_user_can('activate_plugins')) return;
    check_admin_referer('activate-plugin_' . plugin_basename(__FILE__));
    mdbm_initialize_monitoring();
}

function mdbm_create_backup() {
    if (!current_user_can('manage_options')) return false;
    check_admin_referer('mdbm-create-backup');

    global $wpdb;
    $backup_file_path = WP_CONTENT_DIR . '/mdbm_backups/' . $wpdb->dbname . '-' . time() . '.sql';

    $command = sprintf(
        'mysqldump --user=%s --password=%s --host=%s %s > %s',
        escapeshellarg(DB_USER),
        escapeshellarg(DB_PASSWORD),
        escapeshellarg(DB_HOST),
        escapeshellarg($wpdb->dbname),
        escapeshellarg($backup_file_path)
    );

    exec($command, $output, $return_var);

    return $return_var === 0 ? $backup_file_path : false;
}

function mdbm_restore_backup($backup_file) {
    if (!current_user_can('manage_options')) return false;
    check_admin_referer('mdbm-restore-backup');

    $backup_file_path = WP_CONTENT_DIR . '/mdbm_backups/' . $backup_file;
    if (!file_exists($backup_file_path)) return false;

    $command = sprintf(
        'mysql --user=%s --password=%s --host=%s %s < %s',
        escapeshellarg(DB_USER),
        escapeshellarg(DB_PASSWORD),
        escapeshellarg(DB_HOST),
        escapeshellarg($wpdb->dbname),
        escapeshellarg($backup_file_path)
    );

    exec($command, $output, $return_var);

    return $return_var === 0;
}

function mdbm_cleanup_monitoring() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'mdbm_monitoring';
    $wpdb->query("DROP TABLE IF EXISTS $table_name");
}

function mdbm_admin_menu() {
    add_menu_page('WPCM Database Monitor', 'DB Monitor', 'manage_options', 'wpcm-database-monitor', 'mdbm_admin_page', 'dashicons-database');
}

function mdbm_admin_page() {
    if (!current_user_can('manage_options')) {
        wp_die(__('You do not have sufficient permissions to access this page.'));
    }

    echo '<div class="wrap"><h1>'.esc_html__('WPCM Database Monitor', 'wpcm-database-monitor').'</h1>';

    if (isset($_POST['action']) && $_POST['action'] === 'create_backup') {
        if (!check_admin_referer('mdbm-create-backup')) {
            wp_die(__('Invalid nonce specified', 'wpcm-database-monitor'), __('Error', 'wpcm-database-monitor'), ['response' => 403]);
        }
        $backup_file = mdbm_create_backup();
        if ($backup_file) {
            echo '<div>' . sprintf(__('Backup created successfully: %s', 'wpcm-database-monitor'), esc_html($backup_file)) . '</div>';
        } else {
            echo '<div>'.esc_html__('Error creating backup.', 'wpcm-database-monitor').'</div>';
        }
    } elseif (isset($_POST['action'], $_POST['backup_file']) && $_POST['action'] === 'restore_backup') {
        if (!check_admin_referer('mdbm-restore-backup')) {
            wp_die(__('Invalid nonce specified', 'wpcm-database-monitor'), __('Error', 'wpcm-database-monitor'), ['response' => 403]);
        }
        if (mdbm_restore_backup($_POST['backup_file'])) {
            echo '<div>'.esc_html__('Backup restored successfully.', 'wpcm-database-monitor').'</div>';
        } else {
            echo '<div>'.esc_html__('Error restoring backup.', 'wpcm-database-monitor').'</div>';
        }
    }

    // Formulário para criar backup
    echo '<form method="post">';
    wp_nonce_field('mdbm-create-backup');
    echo '<input type="hidden" name="action" value="create_backup"/>';
    submit_button(__('Create Backup Now', 'wpcm-database-monitor'), 'primary', 'submit', false);
    echo '</form>';

    // Formulário para restaurar backup
    echo '<h2>'.esc_html__('Restore Backup', 'wpcm-database-monitor').'</h2>';
    $backup_dir = WP_CONTENT_DIR . '/mdbm_backups';
    $backup_files = array_diff(scandir($backup_dir), array('..', '.'));
    
    echo '<form method="post">';
    wp_nonce_field('mdbm-restore-backup');
    echo '<input type="hidden" name="action" value="restore_backup"/>';
    echo '<select name="backup_file">';
    foreach ($backup_files as $file) {
        echo '<option value="' . esc_attr($file) . '">' . esc_html($file) . '</option>';
    }
    echo '</select>';
    submit_button(__('Restore Backup', 'wpcm-database-monitor'), 'secondary', 'submit', false);
    echo '</form>';

    echo '</div>'; // Fecha a div.wrap
}
